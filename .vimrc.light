" First run {{{1
  " Autoinstall `vim-plug`.
  if !filereadable(expand('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif


" Plugins {{{1
  call plug#begin('~/.vim/plugins')

  " Color schemes {{{2
    " Janah color scheme.
    Plug 'mhinz/vim-janah'

  " Library plugins serving as dependencies for the others {{{2
    " Allows to repeat the plugin mappings with `.` in the normal mode.
    Plug 'tpope/vim-repeat'

    " Allows to define new text objects (see the next section).
    " https://github.com/kana/vim-textobj-user/wiki lists many useful plugins doing that.
    Plug 'kana/vim-textobj-user'

  " New text objects {{{2
    " `CamelCase` / `snake_case` etc. identifier parts.
    Plug 'chaoren/vim-wordmotion'
      " Prepend a motion by `<Leader>` to move granularly.
      let g:wordmotion_prefix = '<Leader>'

    " Python: "A class"/"inner class" (`ac`/`ic`), "a function"/"inner function" (`af`/`if`)
    " text objects + class/function motions (`[p`/`]p` + `c`/`f`).
    Plug 'bps/vim-textobj-python'

  " Editing {{{2
    " Autodetect indentation options based on current or other similar files.
    Plug 'tpope/vim-sleuth'

    " Move and jump to elements of comma-separated lists (e.g. function arguments).
    Plug 'AndrewRadev/sideways.vim'
      nnoremap <silent> <Leader>h :SidewaysLeft<CR>
      nnoremap <silent> <Leader>l :SidewaysRight<CR>

    " Makes H a text object for the LHS of an expression (=, ==, =>) and L for the RHS.
    " E.g.: `ciL` in "stri|ng a = 'some string';" changes the left hand side.
    Plug 'vim-scripts/text-object-left-and-right'

    " Text objects for surrounding brackets, tags... (`:help surround.txt`).
    " E.g.: `ds(` removes the surrounding parentheses,
    " while `cs(]` replaces them by square brackets.
    Plug 'tpope/vim-surround'

    " For modern terminals, frees from the need to `:set paste` / `:set nopaste`.
    Plug 'ConradIrwin/vim-bracketed-paste'

    " Commenting with gc*
    Plug 'tpope/vim-commentary'

    " Switching between a single-line statement and a multi-line one (`gJ` / `gS`).
    Plug 'AndrewRadev/splitjoin.vim'
      " Python: Put brackets on lines of their own.
      let g:splitjoin_python_brackets_on_separate_lines = 1

  " Interface {{{2
    " Many paired commands to toggle settings (like `[on`, `]on`, `con` /
    " `[ow`, `]ow`, `cow` to enable/disable/toggle line numbering/wrapping, `:help unimpaired`).
    Plug 'tpope/vim-unimpaired'

    " Smooth scrolling.
    Plug 'yuttie/comfortable-motion.vim'
      " Mouse wheel support.
      noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
      noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
      " Scroll by visual, not logical lines.
      let g:comfortable_motion_scroll_down_key = 'gj'
      let g:comfortable_motion_scroll_up_key = 'gk'

    " Indentation markers.
    Plug 'Yggdroot/indentLine'
      " Set the concealed character color.
      let g:indentLine_color_term = 235
      " Use a Unicode character that comprises the whole character cell height.
      let g:indentLine_char = '‚ñè'
      " Disable concealing under cursor for insert mode.
      let g:indentLine_concealcursor = 'nc'
      " Completely disable for TeX.
      let g:indentLine_fileTypeExclude = ['tex']
      augroup disable_tex_concealing
        autocmd!
        autocmd syntax tex setlocal conceallevel=0
      augroup END

    " Undo tree.
    Plug 'sjl/gundo.vim'
      " Prefer Python 3.
      let g:gundo_prefer_python3 = v:true
      " Toggle Gundo.
      nnoremap <silent> <Leader>u :GundoToggle<CR>

    " Adds a "Diff" option when Vim finds an existing swap file.
    Plug 'chrisbra/Recover.vim'

    " UNIX shell command wrappers
    " (`:Rename`, `:SudoWrite`, `:Chmod`, `:Locate`... - see `:help eunuch-commands`).
    " Automatically makes new files with a shebang executable.
    Plug 'tpope/vim-eunuch'

  " Machine-specific {{{2
    if filereadable(expand('~/.local.vimrc.plugins'))
      source ~/.local.vimrc.plugins
    endif

  call plug#end()


" Interface {{{1
  " Color scheme.
  try
    augroup janah_colorscheme_tweaks
      autocmd!
      autocmd ColorScheme janah highlight Normal ctermbg=232
      autocmd ColorScheme janah highlight Comment ctermfg=245
      autocmd ColorScheme janah highlight Search ctermbg=27
    augroup END
    colorscheme janah
  catch /E185:/
    " Color scheme not (yet) installed.
    colorscheme desert
  endtry
  " Prevent `$VIMRUNTIME/syntax/synload.vim` from issuing `:colors` when `.vimrc` is reloaded.
  if exists('colors_name')
    unlet colors_name
  endif

  " Indicate a fast terminal connection: smoother redrawing,
  " better for copying in graphic terminals.
  set ttyfast

  " Don't wrap long lines by default (use the `cow` mapping from `vim-unimpaired` to toggle).
  set nowrap
  " ...except in diff mode.
  augroup wrap_in_diff
    autocmd!
    autocmd FilterWritePre * if &diff | setlocal wrap | endif
  augroup END

  " When wrapping, use `breakat` (whitespace / punctuation by default).
  set linebreak
  " Display as much as possible of the last line instead of `@`s.
  set display=lastline

  " Minimal number of screen lines to keep above and below the cursor.
  set scrolloff=3

  " Show cursor position and percentage.
  set ruler

  " Show line numbers.
  set number
  " ...except in the terminal
  augroup no_line_numbering_in_terminal
    autocmd!
    if has('nvim')
      autocmd TermOpen * setlocal nonumber
    else
      autocmd TerminalOpen * setlocal nonumber
    endif
  augroup END

  " Highlight matching brackets
  set showmatch
  " Include angle brackets in bracket matching
  setglobal matchpairs+=<:>

  " Always show the status line.
  set laststatus=2

  " Show the currently typed command in lower right corner.
  set showcmd

  " When jumping to a buffer, use a window already containing it.
  set switchbuf=useopen

  " Easy window navigation.
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l


" Basic mappings {{{1
  " Set <Leader> to comma
  let mapleader = ','

  " Use `jj` as an alternative to `<Esc>`.
  inoremap jj <Esc>
  " `jk` is another alternative.
  inoremap jk <Esc>

  " Use gj/gk by default (move by visible lines, not logical ones)
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk


" Filesystem {{{1
  " Auto-change the current directory to that of the currently edited file.
  try
      set autochdir
  catch
  endtry

  " When a file is changed outside with no local modifications, reload it.
  set autoread

  " Auto-write on some commands, e.g. `make`.
  set autowrite

  " Directories for swap files.
  set dir=/var/tmp,/tmp

  " Automatically ask for confirmation on unsaved changes, read-only writes etc.
  set confirm

  " Use the terminal code to display a visual bell (most likely a screen flash) instead of a beep.
  set visualbell
  " And then use an empty code to produce the visual bell, i.e. do nothing.
  set t_vb=

  " Allow to have hidden modified buffers not currently opened in any windows.
  set hidden

  " Show the current file path
  nnoremap <silent> <Leader>: :echo expand("%:p")<CR>

  " Add Vim's current directory and current file's location directory to the path.
  set path=.,

  " Source the .vimrc/init.vim file upon writing to it
  augroup source_written_vimrc
    autocmd!
    autocmd BufWritePost .vimrc nested source %
    autocmd BufWritePost init.vim nested source %
  augroup END


" Encoding, tabulation and spaces, indentation {{{1
  " Use UTF-8 encoding internally.
  set encoding=utf-8

  " Try these encodings in order when opening a file.
  set fileencodings=ucs-bom,utf-8,windows-1251

  " Do not automatically wrap lines in text files and comments.
  set textwidth=0

  " Enable automatic indentation.
  set autoindent
  " Language-specific autoindenting.
  set smartindent
  " Let `<Backspace>` undo indentation.
  set smarttab

  " Use spaces instead of `<TAB>`s.
  set expandtab
  " Auto-remove spaces at ends of lines in source files.
  function! TrimWhitespace()
    " Credits: https://vi.stackexchange.com/a/456.
    let l:view_state = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:view_state)
  endfunction
  augroup trim_whitespace
    autocmd!
    autocmd BufWritePre *.{c,cc,cxx,cpp,h,py,sh,vimrc} call TrimWhitespace()
  augroup END

  " Tabulation stops. `<TAB>`s are regarded as 8 spaces, but 4 spaces can be mixed with them.
  set tabstop=8
  set softtabstop=4

  " Number of spaces for an autoindentation step.
  set shiftwidth=4

  " Show tabs as `>-------`, trailing spaces as `_`,
  " and non-breakable spaces as `!` (see `:help listchars`).
  set list
  set listchars=tab:>-,trail:_,nbsp:!


" Editing {{{1
  " Allow backspacing over auto-indent, EOL, the position where insert mode was entered
  set backspace=indent,eol,start

  " Allow moving cursor after EOLs and inside `<Tab>` characters.
  set virtualedit=all

  " Delete comment character when joining commented lines
  set formatoptions+=j


" Search {{{1
  " Ignore case in search strings...
  set ignorecase
  " ...unless they have uppercase characters.
  set smartcase

  " Highlight search results.
  set hlsearch
  " Clear search highlight by `<Leader><Space>`.
  nnoremap <silent> <Leader><Space> :noh<CR>

  " Incremental search (as you type).
  set incsearch

  " Wrap around the beginning of the file when searching.
  set wrapscan

  " Enable Perl-compatible regexes by default ("very magic").
  nnoremap / /\v
  vnoremap / /\v

  " Substitute globally by default, `/g` switches back.
  set gdefault

  " Use `rg` (ripgrep) as a substitution for `grep`.
  if executable('rg')
      set grepprg=rg\ --vimgrep
  endif


" Syntax highlighting {{{1
  " Limit syntax highlighting to 1000 first symbols in a line (e.g. for JSON without newlines).
  set synmaxcol=1000


" Completion {{{1
  " Disable searching for completions in the included files (often too slow).
  " Use `<Ctrl-X><Ctrl-I>` to manually trigger it instead.
  set complete-=i

  " Complete options: Show even if only one option is available;
  " add extra preview information; don't modify the text.
  set completeopt=menuone,preview,noinsert

  " Limit the popup menu height.
  set pumheight=15

  " When several words match by prefix upon hitting `<Tab>` in the command line,
  " complete the longest common prefix and show a list (`longest:full` with `wildmenu`).
  " If `<Tab>` is pressed again, the match is completed with the next choice (`full`).
  set wildmenu
  set wildmode=longest:full,full


" Machine-specific customizations {{{1
  if filereadable(expand('~/.local.vimrc.after'))
    source ~/.local.vimrc.after
  endif


" Vim folding for this file {{{1
" vim: set foldmethod=marker
