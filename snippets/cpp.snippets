# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};
#
#
# Mapreduce
snippet mapred
	#include <quality/mapreducelib/all.h>
	#include <quality/mr_util/io_utils.h>

	using namespace NMR;

# IMap
snippet imap
	/**
	 * Input:  ${7:; ; }
	 * Output: ${8:; ; }
	**/
	class ${1:TMap}: public IMap
	{
	    OBJECT_NOCOPY_METHODS($1)
	
	public:
	    virtual void DoSub(TValue ${3:key}, TValue ${4:subKey}, TValue ${5:value}, TUpdate& ${6:output})
	    {
			${2:// code}
	        $6.AddSub($3, $4, $5);
	    }
	};
	
	REGISTER_SAVELOAD_CLASS(`strftime("%s")`, $1)
	
	${9}
# IReduce
snippet ired
	/**
	 * Input:  ${6:; ; }
	 * Output: ${7:; ; }
	**/
	class ${1:TReduce}: public IReduce
	{
	    OBJECT_NOCOPY_METHODS($1)

	public:
	    virtual void Do(TValue ${3:key}, TTableIterator& ${4:input}, TUpdate& ${5:output})
	    {
	        for (; $4.IsValid(); ++$4) {
				${2:// code}
	            $5.AddSub($3, $4.GetSubKey(), $4.GetValue())};
	        }
	    }
	};

	REGISTER_SAVELOAD_CLASS($1)

	${8}
